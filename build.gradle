plugins {
	id 'java'
	id 'java-library'
	id 'eclipse'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
//    id 'org.xtext.xtend' version '4.0.0'
}

group = 'org.hl7.fhir'
version = '0.0.1' // Set project-level property
def applicationName = 'fhir.ig' // Local variable for the artifact name


java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
	mavenLocal()
    mavenCentral()
    flatDir {
	    dirs 'libs'
    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src/main/xtend'
            srcDirs 'src/main/resources'
           }
    }
}

configurations {
    xtendCompiler
}

configurations.all {
    resolutionStrategy {
        force 'org.slf4j:slf4j-api:2.0.0'
    }
}

dependencies {
    implementation libs.fhirEmf
    implementation libs.emfCommon
    implementation libs.emfEcore
    implementation libs.emfEcoreXMI
    implementation libs.jacksonAnnotations
    implementation libs.jacksonDatabind

    implementation libs.springWeb
    implementation libs.springActuator
    implementation libs.context
    implementation libs.springTest
    implementation libs.springSessionDataRedis
    implementation libs.redis

    xtendCompiler libs.xtextXbase
    xtendCompiler libs.xtendCore
    xtendCompiler libs.xtendLib
    // xtendCompiler libs.xtendStandalone
   
   	// Logging
	implementation libs.slf4jAPI
	implementation libs.logbackClassic
    
    testImplementation libs.logbackClassic
    testImplementation libs.junitJupiter
    testImplementation libs.junitJupiterAPI
    testImplementation libs.emfEcoreXMI
}

def xtendGenDir = file("$buildDir/xtend-gen")
task compileXtend(type: JavaExec) {
    group = "build"
    description = "Compiles Xtend sources to Java"
    classpath = configurations.xtendCompiler
    mainClass = "org.eclipse.xtend.core.compiler.batch.Main"
    args = [
        "src/main/xtend",        // Input (Xtend source folder)
        "-d", xtendGenDir, // Output dir for generated Java
        "-classpath", configurations.xtendCompiler.asPath + File.pathSeparator + sourceSets.main.runtimeClasspath.asPath
    ]
}
compileJava.dependsOn compileXtend

jar {
    manifest {
        attributes 'Main-Class': provider { application.mainClass.get() }
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE  // Ignore duplicate entries

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude("META-INF/*.RSA", "META-INF/*.DSA", "META-INF/*.SF", "META-INF/MANIFEST.MF")
}

processResources {
  from ('src/main/java') {
     include '**/*.ecore'
  }
}
 
test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
}

task checkSignedJars {
    doLast {
        println "Scanning for signed JARs..."
        configurations.runtimeClasspath.files.each { jarFile ->
            if (jarFile.name.endsWith(".jar")) {
                println "Checking: ${jarFile.name}"
                def hasSignature = false
                zipTree(jarFile).visit { file ->
                    if (file.name.matches("META-INF/.*\\.(SF|RSA|DSA|EC)")) {
                        println "Found signed JAR: ${jarFile.name} (Signature File: ${file.name})"
                        hasSignature = true
                    }
                }
                if (!hasSignature) {
                    println "No signature found in: ${jarFile.name}"
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId applicationName
            version project.version
            from(components.java)
        }
	}
}
